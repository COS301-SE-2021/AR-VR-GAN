syntax = "proto3";

package ModelGenerator;

service ModelGeneration{
    rpc GenerateImage (stream ImageRequest) returns (stream ImageResponse); // Implemented
    rpc LoadDataset (LoadDatasetRequest) returns (LoadDatasetResponse); // Not implemented
    rpc TrainModel (TrainModelRequest) returns (TrainModelResponse); // Implemented
    rpc LoadModel (LoadModelRequest) returns (LoadModelResponse); // Implemented
    rpc ListModels (ListModelsRequest) returns (ListModelsResponse); // Implemented
    rpc CurrentModel (CurrentModelRequest) returns (CurrentModelResponse);
    // - Delete Model // Could be used later
}

message ImageRequest{
    repeated float vector = 1;
}

// This could be unnescessary rather have all its needs in the trainModelRequest
// Same applies for the corresponding response
message LoadDatasetRequest{
    string datasetName = 1;
    string datasetType = 2;
    bytes dataset = 3;
}

message TrainModelRequest{
    string modelName = 1; // The name that model will be saved as; will be saved in the savedModels directory
    int32 trainingEpochs = 2; // The number of iterations that will be used to train the model; a good number is 30
    int32 latentSize = 3; // The size of the latent vector; good size is 3
    string datasetName = 4; // only 3 options available, mnist, fashion and cifar10
    // bytes dataset = 5;
    // bool beta = 6;
    int32 beta = 7; // must be greater than or equal to 1
    string modelType = 8; // 2 options available CVAE and CAE; you don't have to use this rn
}

message LoadModelRequest{
    string modelName = 1;
}

message CurrentModelRequest{
}

message ListModelsRequest{
    bool default = 1; // To show only the default models
    bool saved = 2; // To show only the ones saved by the user 
    // Set both to true if you want both
}

message ImageResponse{
    int32 width = 1;
    int32 height = 2;
    bytes image = 3;
}

message LoadDatasetResponse{
    bool succesful = 1; 
    string message = 2;
}

message TrainModelResponse{
    bool succesful = 1; // When training is successful will return a true value and returns false when exception is thrown 
    string message = 2; // Shows error message if `succesful` is false and the name of the model when successful
}

message LoadModelResponse{
    bool succesful = 1;  // When loading is successful will return a true value and returns false when exception is thrown
    string message = 2; // Shows error message if `succesful` is false and the name of the model when successful
}

message ListModelsResponse{
    repeated string models = 3; // Will return an array of all the names of available models from the specifed folder in the request
}

message CurrentModelResponse{
    string modelName = 1; // Will return an array of all the names of available models from the specifed folder in the request
}
